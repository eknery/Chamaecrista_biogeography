one_tree$edge.length
### choose a locus !!!
locus_name = "ITS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample times based on distance from root to tip:
#sts = setNames( rep(54, Ntip(one_tree)), one_tree$tip.label)
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length / 54e-6
one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
rc_test
rc_test$relaxed_treedater
### choose a locus !!!
locus_name = "ITS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample times based on distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts
one_tree$tip.label
rep(5400, length(one_tree$tip.label))
rep(54e6, length(one_tree$tip.label))
setNames( rep(54e6, length(one_tree$tip.label)), one_tree$tip.label )
sts = setNames( rep(54e6, length(one_tree$tip.label)), one_tree$tip.label )
sts
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
one_tree
one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
dater(tre = one_tree, sts = sts, s = 1000)
one_tree
### choose a locus !!!
locus_name = "ITS"
one_tree = tree_list[[locus_name]]
### choose a locus !!!
locus_name = "ETS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample times based on distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts
one_tree$edge.length
one_tree$edge.length
sts
max(sts)
(sts * 54e6) / max(sts)
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts = (sts * 54e6) / max(sts)
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
### choose a locus !!!
locus_name = "ITS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts = (sts * 54e6) / max(sts)
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$strict_treedater)
rc_test$strict_treedate
### choose a locus !!!
locus_name = "matk"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
### choose a locus !!!
locus_name = "matK"
### choose a locus !!!
locus_name = "matK"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts = (sts * 54e6) / max(sts)
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$strict_treedater)
rc_test$strict_treedater
### choose a locus !!!
locus_name = "trnDT"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts = (sts * 54e6) / max(sts)
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$strict_treedater)
rc_test$strict_treedate
sts
### choose a locus !!!
locus_name = "trnDT"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
sts = (sts * 54e6) / max(sts)
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$strict_treedater)
rc_test$strict_treedater
median(sts)
### choose a locus !!!
locus_name = "trnDT"
one_tree = tree_list[[locus_name]]
plot(one_tree)
### sample distance from root to tip:
sts = setNames( ape::node.depth.edgelength( one_tree )[1:ape::Ntip(one_tree)], one_tree$tip.label)
median(sts)
mean(sts)
min(sts)
rnorm(54e6)
rnorm(n = Ntip(one_tree), mean = 54e6, sd = 1)
rnorm(n = Ntip(one_tree), mean = 54e6, sd = 100)
### choose a locus !!!
locus_name = "trnDT"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 54e6, sd = 100)
names(sts) =  one_tree$tip.label
sts
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
sts
rc_test
### choose a locus !!!
locus_name = "trnDT"
plot(one_tree)
one_tree = tree_list[[locus_name]]
sts = rnorm(n = Ntip(one_tree), mean = 54e6, sd = 100)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length * 1e-3
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
rc_test
### choose a locus !!!
locus_name = "ETS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 54e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
### choose a locus !!!
locus_name = "ITS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 54e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
### choose a locus !!!
locus_name = "matK"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 54e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
plot(rc_test$strict_treedater)
rc_test$strict_treedater
one_tree
View(one_tree)
one_tree[["tip.label"]]
### choose a locus !!!
locus_name = "matK"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 40e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
rc_test$strict_treedater
### choose a locus !!!
locus_name = "trnDT"
one_tree = tree_list[[locus_name]]
plot(one_tree)
View(one_tree)
one_tree[["tip.label"]]
sts = rnorm(n = Ntip(one_tree), mean = 40e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
rc_test$strict_treedater
### choose a locus !!!
locus_name = "ITS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
View(one_tree)
one_tree[["tip.label"]]
sts = rnorm(n = Ntip(one_tree), mean = 50e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
rc_test$strict_treedater
plot(rc_test$strict_treedater)
### choose a locus !!!
locus_name = "ETS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 50e6, sd = 10)
View(one_tree)
one_tree[["tip.label"]]
### choose a locus !!!
locus_name = "ETS"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 50e6, sd = 10)
names(sts) =  one_tree$tip.label
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
plot(rc_test$strict_treedater)
rc_test$strict_treedater
### choose a locus !!!
locus_name = "trnLF"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 50e6, sd = 10)
names(sts) =  one_tree$tip.label
View(one_tree)
one_tree[["tip.label"]]
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
plot(rc_test$strict_treedater)
rc_test$strict_treedater
### input diretory
dir_input = "3_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### all spp names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = sort(unique(all_names))
all_names
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "0_raw_sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### cassieae pattern names
patterns = c("Batesia",
"Melanoxylon",
"Recordoxylon",
"Vouacapoua",
"C_",
"Cassia",
"Senna"
)
### all species names
all_names = names(fasta_list[[1]])
all_names
### all species names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = unique(all_names)
all_names
### select cassieae names
cass_names = c()
for(i in 1:length(patterns)){
bool = grepl(pattern = patterns[i], all_names)
cass_names = c(cass_names, all_names[bool])
}
cass_names
patterns[i
patterns[i]
### cassieae pattern names
patterns = c("Batesia",
"Melanoxylon",
"Recordoxylon",
"Vouacapoua",
"C_",
"Cassia",
"Senna"
)
### select cassieae names
cass_names = c()
for(i in 1:length(patterns)){
bool = grepl(pattern = patterns[i], all_names)
cass_names = c(cass_names, all_names[bool])
}
cass_names
unique(cass_names)
cass_names = unique(cass_names)
### keeping only cassieae
my_fasta_list = fasta_list
for(i in 1:length(fasta_list)){
my_fasta_list[[i]] = fasta_list[[i]][names(fasta_list[[i]]) %in% cass_names]
names(fasta_list)[i] = names(fasta_list)[i]
}
my_fasta_list
### exporting sequences from ingroup
dir_out = "3_cassieae/sequences/"
for(i in 1:length(my_fasta_list)){
fasta_name = paste0(names(my_fasta_list)[i], ".fasta")
write.phyDat(x = my_fasta_list[[i]],
file = paste0(dir_out,fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
### file names
dir_input = "2_cassieae/sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "2_cassieae/sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
dir_out = "3_cassieae/MP_trees/"
dir_out = "2_cassieae/MP_trees/"
for(i in 1:length(fasta_list) ){
## tree name
tree_name = paste0(names(fasta_list)[i], ".tree")
## bootstrap MP trees
boots_mp_trees = bootstrap.phyDat(fasta_list[[i]],
FUN = pratchet,
bs = 100)
## export
write.tree(phy =  boots_mp_trees,
file = paste0(dir_out, tree_name)
)
## warn
print(paste0("MP trees done: ",tree_name))
}
