### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
plot(rc_test$strict_treedater)
rc_test$strict_treedater
### choose a locus !!!
locus_name = "trnLF"
one_tree = tree_list[[locus_name]]
plot(one_tree)
sts = rnorm(n = Ntip(one_tree), mean = 50e6, sd = 10)
names(sts) =  one_tree$tip.label
View(one_tree)
one_tree[["tip.label"]]
### modify edge length to represent evolutionary distance with rate 1e-3:
one_tree$edge.length = one_tree$edge.length
### clock test
rc_test = relaxedClockTest( one_tree,
sts= sts,
s= 1000,
omega0= 0.0001,
nreps= 100)
rc_test
plot(rc_test$relaxed_treedater)
rc_test$relaxed_treedater
plot(rc_test$strict_treedater)
rc_test$strict_treedater
### input diretory
dir_input = "3_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### all spp names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = sort(unique(all_names))
all_names
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "0_raw_sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### cassieae pattern names
patterns = c("Batesia",
"Melanoxylon",
"Recordoxylon",
"Vouacapoua",
"C_",
"Cassia",
"Senna"
)
### all species names
all_names = names(fasta_list[[1]])
all_names
### all species names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = unique(all_names)
all_names
### select cassieae names
cass_names = c()
for(i in 1:length(patterns)){
bool = grepl(pattern = patterns[i], all_names)
cass_names = c(cass_names, all_names[bool])
}
cass_names
patterns[i
patterns[i]
### cassieae pattern names
patterns = c("Batesia",
"Melanoxylon",
"Recordoxylon",
"Vouacapoua",
"C_",
"Cassia",
"Senna"
)
### select cassieae names
cass_names = c()
for(i in 1:length(patterns)){
bool = grepl(pattern = patterns[i], all_names)
cass_names = c(cass_names, all_names[bool])
}
cass_names
unique(cass_names)
cass_names = unique(cass_names)
### keeping only cassieae
my_fasta_list = fasta_list
for(i in 1:length(fasta_list)){
my_fasta_list[[i]] = fasta_list[[i]][names(fasta_list[[i]]) %in% cass_names]
names(fasta_list)[i] = names(fasta_list)[i]
}
my_fasta_list
### exporting sequences from ingroup
dir_out = "3_cassieae/sequences/"
for(i in 1:length(my_fasta_list)){
fasta_name = paste0(names(my_fasta_list)[i], ".fasta")
write.phyDat(x = my_fasta_list[[i]],
file = paste0(dir_out,fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
### file names
dir_input = "2_cassieae/sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "2_cassieae/sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
dir_out = "3_cassieae/MP_trees/"
dir_out = "2_cassieae/MP_trees/"
for(i in 1:length(fasta_list) ){
## tree name
tree_name = paste0(names(fasta_list)[i], ".tree")
## bootstrap MP trees
boots_mp_trees = bootstrap.phyDat(fasta_list[[i]],
FUN = pratchet,
bs = 100)
## export
write.tree(phy =  boots_mp_trees,
file = paste0(dir_out, tree_name)
)
## warn
print(paste0("MP trees done: ",tree_name))
}
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "3_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### choose a locus !!!
locus_name = "ETS"
one_fasta = fasta_list[[locus_name]]
### fit subsitution models
model_fit = modelTest(one_fasta, model = "all")
## pick the best model
best_model = model_fit[model_fit$AICc == min(model_fit$AICc),]
best_model
## parameter estimates from best model
best_fit = as.pml(best_model, best_model$Model)
best_fit
### optimize tree
ml_tree = pml_bb(x = best_fit,
rearrangements="NNI",
control = pml.control(trace = 0))
## select output dir
dir_out = "2_cassieae/ML_trees/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,locus_name,".tree")
)
### choose a locus !!!
locus_name = "ITS"
one_fasta = fasta_list[[locus_name]]
### fit subsitution models
model_fit = modelTest(one_fasta, model = "all")
## pick the best model
best_model = model_fit[model_fit$AICc == min(model_fit$AICc),]
## parameter estimates from best model
best_fit = as.pml(best_model, best_model$Model)
best_fit
### optimize tree
ml_tree = pml_bb(x = best_fit,
rearrangements="NNI",
control = pml.control(trace = 0))
## select output dir
dir_out = "2_cassieae/ML_trees/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,locus_name,".tree")
)
### choose a locus !!!
locus_name = "matK"
one_fasta = fasta_list[[locus_name]]
### fit subsitution models
model_fit = modelTest(one_fasta, model = "all")
## pick the best model
best_model = model_fit[model_fit$AICc == min(model_fit$AICc),]
## parameter estimates from best model
best_fit = as.pml(best_model, best_model$Model)
best_fit
### optimize tree
ml_tree = pml_bb(x = best_fit,
rearrangements="NNI",
control = pml.control(trace = 0))
## select output dir
dir_out = "2_cassieae/ML_trees/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,locus_name,".tree")
)
### choose a locus !!!
locus_name = "trnLF"
one_fasta = fasta_list[[locus_name]]
### fit subsitution models
model_fit = modelTest(one_fasta, model = "all")
## pick the best model
best_model = model_fit[model_fit$AICc == min(model_fit$AICc),]
## parameter estimates from best model
best_fit = as.pml(best_model, best_model$Model)
best_fit
### optimize tree
ml_tree = pml_bb(x = best_fit,
rearrangements="NNI",
control = pml.control(trace = 0))
## select output dir
dir_out = "2_cassieae/ML_trees/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,locus_name,".tree")
)
### choose a locus !!!
locus_name = "trnDT"
one_fasta = fasta_list[[locus_name]]
### fit subsitution models
model_fit = modelTest(one_fasta, model = "all")
## pick the best model
best_model = model_fit[model_fit$AICc == min(model_fit$AICc),]
## parameter estimates from best model
best_fit = as.pml(best_model, best_model$Model)
best_fit
### optimize tree
ml_tree = pml_bb(x = best_fit,
rearrangements="NNI",
control = pml.control(trace = 0))
## select output dir
dir_out = "2_cassieae/ML_trees/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,locus_name,".tree")
)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### file names
dir_input = "2_cassieae/sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "2_cassieae/MP_trees_clean/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
### getting species per locus
all_names = c()
for(i in 1:length(fasta_list)){
some_names = names(fasta_list[[i]])
all_names = c(all_names, some_names)
}
### into one dataframe
all_names = unique(all_names)
### get names per locus
names_loci =  all_names
for(i in 1:length(fasta_list)){
boll_names = all_names %in% names(fasta_list[[i]])
names_loci = cbind(names_loci, boll_names)
}
### transform to tibble
names_loci = as.tibble(names_loci)
### get species with all loci sequenced
common_names = names_loci %>%
filter_at(vars(-names_loci), all_vars(. == TRUE) ) %>%
select(names_loci) %>%
pull()
# pruning trees to sampled species
pruned_trees_list = tree_list
for (i in 1:length(tree_list) ){
pruned_trees = tree_list[[i]]
for(j in 1:length(tree_list[[i]]) ){
pruned_trees[[j]] = keep.tip(phy = tree_list[[i]][[j]],
tip = common_names)
}
pruned_trees_list[[i]] = pruned_trees
}
### transforming in vector
pruned_trees_vec = c()
for(i in 1:length(pruned_trees_list)){
pruned_trees_vec = c(pruned_trees_vec, pruned_trees_list[[i]] )
}
### distance
dist = RF.dist(c(pruned_trees_list[[1]],
pruned_trees_list[[2]],
pruned_trees_list[[3]],
pruned_trees_list[[4]],
pruned_trees_list[[5]]
),
tree2 = NULL,
normalize = T)
### getting vector with names for each distance
locus = c()
for(i in 1:length(pruned_trees_list)){
locus_name = names(pruned_trees_list)[i]
locus_rep = rep(locus_name, length.out= length(pruned_trees_list[[i]]) )
locus = c(locus, locus_rep)
}
### PCOA
pcoa = pcoa(dist, correction="none", rn=NULL)
pcoa_df = as.data.frame(cbind(locus, pcoa$vectors))
### get % var
pc_rel_var = pcoa$values$Relative_eig
### axis names
pc_axis_1 = paste0("PCoA (", round(pc_rel_var[1]*100, 2), "%)" )
pc_axis_2 = paste0("PCoA (", round(pc_rel_var[2]*100, 2), "%)" )
### plot pcoa
pcoa_plot = ggplot(data = pcoa_df,
aes(x=as.numeric(Axis.1),
y=as.numeric(Axis.2),
color=locus)) +
geom_point(size = 1, alpha = 0.5) +
scale_colour_manual(values=c("ETS"= "darkred",
"ITS"= "darkorange",
"matK" = "darkorchid",
"trnDT" = "darkgreen",
"trnLF" = "darkblue"
)
)+
labs(x= pc_axis_1,
y= pc_axis_2)+
guides(fill = guide_legend(title="",
ncol = 5,
byrow = TRUE) ) +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=12,face="bold"),
legend.position = "bottom")
pcoa_plot
### plot pcoa
pcoa_plot = ggplot(data = pcoa_df,
aes(x=as.numeric(Axis.1),
y=as.numeric(Axis.2),
color=locus)) +
geom_point(size = 1, alpha = 0.5) +
scale_colour_manual(values=c("ETS"= "darkred",
"ITS"= "darkorange",
"matK" = "darkorchid",
"trnDT" = "darkgreen",
"trnLF" = "darkblue"
)
)+
labs(x= pc_axis_1,
y= pc_axis_2)+
guides(color = guide_legend(title="",
ncol = 5,
byrow = TRUE) ) +
theme(panel.background=element_rect(fill="white"),
panel.grid=element_line(colour=NULL),
panel.border=element_rect(fill=NA,colour="black"),
axis.title=element_text(size=12,face="bold"),
legend.position = "bottom")
pcoa_plot
### export plot
tiff("2_cassieae/pcoa_MP_trees.tiff",
units="cm", width=10, height=9, res=600)
pcoa_plot
dev.off()
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### all spp names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = sort(unique(all_names))
### including all spp in all loci
my_fasta_list = fasta_list
for(i in 1:length(fasta_list)){
one_locus = fasta_list[[i]]
n_patterns = length(one_locus[[1]])
for(name in all_names){
boll = name %in% names(one_locus)
if(boll == FALSE){
one_locus[[name]] = as.integer(rep(18, n_patterns))
}
}
my_fasta_list[[i]] = one_locus
}
### ordering
for(i in 1:length(my_fasta_list)){
my_fasta_list[[i]] = my_fasta_list[[i]][all_names]
}
### exporting sequences
dir_out = "3_final_sequences/concatenation/"
for(i in 1:length(my_fasta_list)){
fasta_name = paste0(names(my_fasta_list)[i], ".fasta")
write.phyDat(x = my_fasta_list[[i]],
file = paste0(dir_out,fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
