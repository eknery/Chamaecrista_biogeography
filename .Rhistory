)
add.simmap.legend(
colors= leg_1,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=0,
y=100
)
add.simmap.legend(
colors= leg_2,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=10,
y=100
)
add.simmap.legend(
colors= leg_3,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=30,
y=100
)
dev.off()
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
nodelabels(
node= (1+n_tips):(n_tips+n_anc),
pie = inner_node_probs,
piecol = full_col,
cex= 0.5
)
### export figure
tiff("8_figures/biogeo_plot_pie.tiff",
units="cm",
width= 9,
height= 18,
res=900)
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
nodelabels(
node= (1+n_tips):(n_tips+n_anc),
pie = inner_node_probs,
piecol = full_col,
cex= 0.5
)
### export figure
tiff("8_figures/biogeo_plot_pie.tiff",
units="cm",
width= 9,
height= 18,
res=900)
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
nodelabels(
node= (1+n_tips):(n_tips+n_anc),
pie = inner_node_probs,
piecol = full_col,
cex= 0.5
)
add.simmap.legend(
colors= leg_1,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=0,
y=100
)
add.simmap.legend(
colors= leg_2,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=10,
y=100
)
add.simmap.legend(
colors= leg_3,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=30,
y=100
)
dev.off()
plot(tr, show.node.label = TRUE)
nodelabels(text = tr$node.label,
frame = "n", cex=0.8, col= "blue")
plot(tr,
cex = 0.6)
plot(tr,
cex = 0.4)
plot(tr,
cex = 0.3)
nodelabels(text = tr$node.label,
frame = "n", cex=0.8, col= "blue")
plot(tr,
cex = 0.3)
nodelabels(
text = tr$node.label,
frame = "n",
cex=0.5,
col= "blue"
)
#######################################################
# Get the inputs for Biogeographical Stochastic Mapping
# Note: this can be slow for large state spaces and trees, since
# the independent likelihoods for each branch are being pre-calculated
# E.g., for 10 areas, this requires calculation of a 1024x1024 matrix
# for each branch.  On a tree with ~800 tips and thus ~1600 branches, this was about 1.6 gigs
# for storage of "BSM_inputs_file.Rdata".
# Update: 2015-09-23 -- now, if you used multicore functionality for the ML analysis,
# the same settings will be used for get_inputs_for_stochastic_mapping().
#######################################################
BSM_inputs_fn = "BSM_inputs_file.Rdata"
res = res_dec2
BSM_inputs_fn = "BSM_inputs_file.Rdata"
runInputsSlow = TRUE
if (runInputsSlow)
{
stochastic_mapping_inputs_list = get_inputs_for_stochastic_mapping(res=res)
save(stochastic_mapping_inputs_list, file=BSM_inputs_fn)
} else {
# Loads to "stochastic_mapping_inputs_list"
load(BSM_inputs_fn)
} # END if (runInputsSlow)
#######################################################
# Stochastic mapping on DEC M3b stratified with islands coming up
#######################################################
clado_events_tables = NULL
ana_events_tables = NULL
lnum = 0
res = res_dec2
BSM_inputs_fn = "BSM_inputs_file.Rdata"
runInputsSlow = TRUE
if (runInputsSlow)
{
stochastic_mapping_inputs_list = get_inputs_for_stochastic_mapping(res=res)
save(stochastic_mapping_inputs_list, file=BSM_inputs_fn)
} else {
# Loads to "stochastic_mapping_inputs_list"
load(BSM_inputs_fn)
} # END if (runInputsSlow)
# Check inputs (doesn't work the same on unconstr)
names(stochastic_mapping_inputs_list)
stochastic_mapping_inputs_list
stochastic_mapping_inputs_list$phy2
stochastic_mapping_inputs_list$COO_weights_columnar
stochastic_mapping_inputs_list$unconstr
set.seed(seed=as.numeric(Sys.time()))
runBSMslow = TRUE
if (runBSMslow == TRUE)
runBSMslow = TRUE
if (runBSMslow == TRUE){
# Saves to: RES_clado_events_tables.Rdata
# Saves to: RES_ana_events_tables.Rdata
# Bug check:
# stochastic_mapping_inputs_list=stochastic_mapping_inputs_list; maxnum_maps_to_try=100; nummaps_goal=50; maxtries_per_branch=40000; save_after_every_try=TRUE; savedir=getwd(); seedval=12345; wait_before_save=0.01; master_nodenum_toPrint=0
BSM_output = runBSM(res, stochastic_mapping_inputs_list=stochastic_mapping_inputs_list, maxnum_maps_to_try=100, nummaps_goal=50, maxtries_per_branch=40000, save_after_every_try=TRUE, savedir=getwd(), seedval=12345, wait_before_save=0.01, master_nodenum_toPrint=0)
RES_clado_events_tables = BSM_output$RES_clado_events_tables
RES_ana_events_tables = BSM_output$RES_ana_events_tables
} else {
# Load previously saved...
# Loads to: RES_clado_events_tables
load(file="RES_clado_events_tables.Rdata")
# Loads to: RES_ana_events_tables
load(file="RES_ana_events_tables.Rdata")
BSM_output = NULL
BSM_output$RES_clado_events_tables = RES_clado_events_tables
BSM_output$RES_ana_events_tables = RES_ana_events_tables
} # END if (runBSMslow == TRUE)
BSM_output$RES_clado_events_tables
# Extract BSM output
clado_events_tables = BSM_output$RES_clado_events_tables
ana_events_tables = BSM_output$RES_ana_events_tables
head(clado_events_tables[[1]])
head(ana_events_tables[[1]])
length(clado_events_tables)
length(ana_events_tables)
head(clado_events_tables[[1]][,-20])
tail(clado_events_tables[[1]][,-20])
head(ana_events_tables[[1]])
tail(ana_events_tables[[1]])
tipranges@df
#######################################################
# Summarize stochastic map tables
#######################################################
areanames = names(tipranges@df)
actual_names = areanames
actual_names
# Get the dmat and times (if any)
dmat_times = get_dmat_times_from_res(res=res, numstates=NULL)
dmat_times
# Simulate the source areas
BSMs_w_sourceAreas = simulate_source_areas_ana_clado(res, clado_events_tables, ana_events_tables, areanames)
clado_events_tables = BSMs_w_sourceAreas$clado_events_tables
ana_events_tables = BSMs_w_sourceAreas$ana_events_tables
# Count all anagenetic and cladogenetic events
counts_list = count_ana_clado_events(clado_events_tables, ana_events_tables, areanames, actual_names)
summary_counts_BSMs = counts_list$summary_counts_BSMs
print(conditional_format_table(summary_counts_BSMs))
model_name
# Histogram of event counts
hist_event_counts(counts_list,
pdffn=paste0("histograms_of_event_counts.pdf"))
#######################################################
# Print counts to files
#######################################################
tmpnames = names(counts_list)
cat("\n\nWriting tables* of counts to tab-delimited text files:\n(* = Tables have dimension=2 (rows and columns). Cubes (dimension 3) and lists (dimension 1) will not be printed to text files.) \n\n")
for (i in 1:length(tmpnames))
#######################################################
# Print counts to files
#######################################################
tmpnames = names(counts_list)
cat("\n\nWriting tables* of counts to tab-delimited text files:\n(* = Tables have dimension=2 (rows and columns). Cubes (dimension 3) and lists (dimension 1) will not be printed to text files.) \n\n")
for (i in 1:length(tmpnames)){
cmdtxt = paste0("item = counts_list$", tmpnames[i])
eval(parse(text=cmdtxt))
# Skip cubes
if (length(dim(item)) != 2)
{
next()
}
outfn = paste0(tmpnames[i], ".txt")
if (length(item) == 0)
{
cat(outfn, " -- NOT written, *NO* events recorded of this type", sep="")
cat("\n")
} else {
cat(outfn)
cat("\n")
write.table(conditional_format_table(item), file=outfn, quote=FALSE, sep="\t", col.names=TRUE, row.names=TRUE)
} # END if (length(item) == 0)
} # END for (i in 1:length(tmpnames))
cat("...done.\n")
#######################################################
# Check that ML ancestral state/range probabilities and
# the mean of the BSMs approximately line up
#######################################################
library(MultinomialCI)    # For 95% CIs on BSM counts
check_ML_vs_BSM(res,
clado_events_tables,
model_name,
tr=NULL,
plot_each_node=FALSE,
linreg_plot=TRUE,
MultinomialCI=TRUE)
check_ML_vs_BSM(res,
clado_events_tables,
"best_model",
tr=NULL,
plot_each_node=FALSE,
linreg_plot=TRUE,
MultinomialCI=TRUE)
#######################################################
# Plot all 50 stochastic maps to PDF
#######################################################
# Setup
include_null_range = F
areanames = areanames
areas = areanames
max_range_size = max_range_size
states_list_0based = rcpp_areas_list_to_states_list(
areas=areas,
maxareas=max_range_size,
include_null_range=include_null_range
)
colors_list_for_states = get_colors_for_states_list_0based(
areanames=areanames,
states_list_0based=states_list_0based,
max_range_size=max_range_size,
plot_null_range=F
)
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
stratified = stratified
# Loop through the maps and plot to PDF
pdffn = paste0("best_model", "_", length(clado_events_tables), "BSMs_v1.pdf")
pdf(file=pdffn, height=6, width=6)
nummaps_goal = 50
for (i in 1:nummaps_goal){
clado_events_table = clado_events_tables[[i]]
analysis_titletxt = paste0(model_name, " - Stochastic Map #", i, "/", nummaps_goal)
plot_BSM(results_object=res, clado_events_table=clado_events_table, stratified=stratified, analysis_titletxt=analysis_titletxt, addl_params=list("j"), label.offset=0.5, plotwhat="text", cornercoords_loc=scriptdir, root.edge=TRUE, colors_list_for_states=colors_list_for_states, show.tip.label=TRUE, include_null_range=include_null_range)
} # END for (i in 1:nummaps_goal)
plot_BSM(results_object=res,
clado_events_table=clado_events_table,
stratified=stratified,
analysis_titletxt=analysis_titletxt,
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
show.tip.label=TRUE,
include_null_range=include_null_range
)
stratified = T
for (i in 1:nummaps_goal){
clado_events_table = clado_events_tables[[i]]
analysis_titletxt = paste0("best_model", " - Stochastic Map #", i, "/", nummaps_goal)
plot_BSM(results_object=res,
clado_events_table=clado_events_table,
stratified=stratified,
analysis_titletxt=analysis_titletxt,
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
show.tip.label=TRUE,
include_null_range=include_null_range
)
} # END for (i in 1:nummaps_goal)
dev.off()
cmdstr = paste("open ", pdffn, sep="")
system(cmdstr)
clado_events_tables
View(stochastic_mapping_inputs_list)
############################################
# Setup for painting a single stochastic map
############################################
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
stratified = T
clado_events_table = clado_events_tables[[1]]
ana_events_table = ana_events_tables[[1]]
############################################
# Open a PDF
############################################
pdffn = paste0("best model - single_stochastic_map_n1.pdf")
pdf(file=pdffn, height=6, width=6)
# Convert the BSM into a modified res object
master_table_cladogenetic_events = clado_events_tables[[1]]
resmod = stochastic_map_states_into_res(res=res, master_table_cladogenetic_events=master_table_cladogenetic_events, stratified=stratified)
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
skiptree=FALSE,
show.tip.label=TRUE
)
resmod
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
skiptree=FALSE,
show.tip.label=TRUE
)
# Paint on the branch states
paint_stochastic_map_branches(
res=resmod,
master_table_cladogenetic_events=master_table_cladogenetic_events,
colors_list_for_states=colors_list_for_states,
lwd=5,
lty=par("lty"),
root.edge=TRUE,
stratified=stratified
)
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"), plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
skiptree=TRUE,
show.tip.label=TRUE
)
dev.off()
############################################
# Open a PDF
############################################
pdffn = paste0("best model - single_stochastic_map_n1.pdf")
pdf(file=pdffn, height=6, width=6)
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
skiptree=FALSE,
show.tip.label=TRUE
)
dev.off()
### reading range data
geogfn = "6_biogeo_data/micro_biogeo.data"
moref(geogfn)
### converting phylip format to tipranges
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn= geogfn)
### load results
load("7_biogeo_results/micro_DEC_2.Rdata")
### results to map
res = res_dec2
### reading range data
geogfn = "6_biogeo_data/micro_biogeo.data"
moref(geogfn)
### converting phylip format to tipranges
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn= geogfn)
# Loads to "stochastic_mapping_inputs_list"
load(BSM_inputs_fn)
BSM_inputs_fn = "8_BMS/BSM_inputs_file.Rdata"
# Loads to "stochastic_mapping_inputs_list"
load(BSM_inputs_fn)
getwd()
BSM_inputs_fn = "8_BSM/BSM_inputs_file.Rdata"
get_inputs_for_stochastic_mapping(res=res)
### load input list
load(BSM_inputs_fn)
View(stochastic_mapping_inputs_list)
getwd()
paste0(getwd(),"8_BSM/")
### Load RES_clado_events_tables
load(file="8_BSM/RES_clado_events_tables.Rdata")
### Loads  RES_ana_events_tables
load(file="8_BSM/RES_ana_events_tables.Rdata")
### make BSM table
BSM_output = NULL
BSM_output$RES_clado_events_tables = RES_clado_events_tables
BSM_output$RES_ana_events_tables = RES_ana_events_tables
BSM_output$RES_clado_events_tables[[1]]
### Extract BSM output from one simulation
clado_events_table = BSM_output$RES_clado_events_tables[[1]]
ana_events_table = BSM_output$RES_ana_events_tables[[1]]
stratified = T
# Convert the BSM into a modified res object
master_table_cladogenetic_events = clado_events_tables[[1]]
# Convert the BSM into a modified res object
master_table_cladogenetic_events = clado_events_table
resmod = stochastic_map_states_into_res(
res=res,
master_table_cladogenetic_events=master_table_cladogenetic_events,
stratified=stratified
)
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
colors_list_for_states=colors_list_for_states,
skiptree=FALSE,
show.tip.label=TRUE
)
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
#colors_list_for_states=colors_list_for_states,
skiptree=FALSE,
show.tip.label=TRUE
)
scriptdir = np(system.file("extdata/a_scripts", package="BioGeoBEARS"))
plot_BioGeoBEARS_results(
results_object=resmod,
analysis_titletxt="Stochastic map",
addl_params=list("j"),
label.offset=0.5,
plotwhat="text",
cornercoords_loc=scriptdir,
root.edge=TRUE,
#colors_list_for_states=colors_list_for_states,
skiptree=FALSE,
show.tip.label=TRUE
)
