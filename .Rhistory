dir_out = "2_chamaecrista/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,"super_fasta",".tree")
)
dist.dna(super_fasta)
as.matrix(super_fasta)
if(!require("EnvNJ")) install.packages("EnvNJ"); library("EnvNJ")
### input diretory
dir_input = "3_final_sequences/chamaecrista_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
otus = names(fasta_list[[1]])
otus
fastaconc(otus = otus,
inputdir = dir_input,
out.file = dir_input)
otus
otus
fastaconc(otus = otus,
inputdir = dir_input,
out.file = "./concatenated_multispecies.fasta")
fastaconc(otus = otus,
inputdir = dir_input,
out.file = ".concatenated_multispecies.fasta")
fastaconc(otus = otus,
inputdir = dir_input,
out.file = "concatenated_multispecies.fasta")
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### file names
dir_input = "4_final_trees/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
tree_list
### input diretory
dir_input = "3_final_sequences/chamaecrista_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### input diretory
dir_input = "3_final_sequences/chamaecrista_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
common_names = names(fasta_list[[1]])
# pruning trees to sampled species
pruned_trees_list = tree_list
for (i in 1:length(tree_list) ){
pruned_trees = tree_list[[i]]
for(j in 1:length(tree_list[[i]]) ){
pruned_trees[[j]] = keep.tip(phy = tree_list[[i]][[j]],
tip = common_names)
}
pruned_trees_list[[i]] = pruned_trees
}
tree_list
### file names
dir_input = "4_final_trees/zuntinni"
tree = read.tree(file = paste0(dir_input, tree_name))
tree = read.tree(file =dir_input)
### file names
dir_input = "4_final_trees/zuntinni.tree"
tree = read.tree(file =dir_input)
pruned_tree = keep.tip(phy = tree,
tip = common_names)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "3_final_sequences/chamaecrista_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "4_final_trees/zuntinni.tree"
tree = read.tree(file =dir_input)
common_names = names(fasta_list[[1]])
pruned_tree = keep.tip(phy = tree,
tip = common_names)
pruned_tree
plot(pruned_tree)
plot(pruned_tree, cex = 0.5)
## export
write.tree(phy =  pruned_tree,
file = "4_final_trees/prunned_zuntinni.tree"
)
### remove labels
pruned_tree$node.label = NULL
pruned_tree
## export
write.tree(phy =  pruned_tree,
file = "4_final_trees/prunned_zuntinni.tree"
)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "3_final_sequences/cassieae_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "4_final_trees/zuntinni.tree"
tree = read.tree(file =dir_input)
### names to keep
common_names = names(fasta_list[[1]])
### prun tree
pruned_tree = keep.tip(phy = tree,
tip = common_names)
### remove labels
pruned_tree$node.label = NULL
## export
write.tree(phy =  pruned_tree,
file = "2_cassieae/prunned_zuntinni.tree"
)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### getting species per locus
all_names = c()
for(i in 1:length(fasta_list)){
some_names = names(fasta_list[[i]])
all_names = c(all_names, some_names)
}
### into one dataframe
all_names = unique(all_names)
### get names per locus
names_loci =  all_names
for(i in 1:length(fasta_list)){
boll_names = all_names %in% names(fasta_list[[i]])
names_loci = cbind(names_loci, boll_names)
}
colnames(names_loci) = c("species", names(fasta_list))
names_loci
### transform to tibble
names_loci = as_tibble(names_loci)
names_loci
names_loci %>%
filer(grepl("C_", species))
names_loci %>%
filter(grepl("C_", species))
names_loci %>%
filter(grepl("C_", species)) %>%
sort(species)
names_loci %>%
filter(grepl("C_", species)) %>%
arrange(species)
c_table = names_loci %>%
filter(grepl("C_", species)) %>%
arrange(species)
write.table(c_table, "c_table.csv", h= T, sep=",")
write.table(c_table, "c_table.csv", sep=",")
write.table(c_table, "c_table.csv", sep=",", row.names = F)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
## drop matK
file_names = file_names
file_names
file_names =
file_names != "matK.fasta"
file_names != "matK.fasta"
file_names == "matK.fasta"
## drop matK
file_names == "matK.fasta"
file_names == "matK.fasta"
## drop matK
"matK.fasta" == file_names
## drop matK
"matK.fasta" %in% file_names
## drop matK
file_names
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
## drop matK
file_names
file_names != "matK.fasta"
file_names[file_names != "matK.fasta"]
## drop matK
file_names = file_names[file_names != "matK.fasta"]
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### getting species per locus
all_names = c()
for(i in 1:length(fasta_list)){
some_names = names(fasta_list[[i]])
all_names = c(all_names, some_names)
}
### into one dataframe
all_names = unique(all_names)
all_names
### get names per locus
names_loci =  all_names
for(i in 1:length(fasta_list)){
boll_names = all_names %in% names(fasta_list[[i]])
names_loci = cbind(names_loci, boll_names)
}
colnames(names_loci) = c("species", names(fasta_list))
### transform to tibble
names_loci = as_tibble(names_loci)
### get species with all loci sequenced
common_names = names_loci %>%
filter_at(vars(-species), all_vars(. == TRUE) ) %>%
select(species) %>%
pull()
common_names
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_chamaecrista/sequences_rogueless/"
file_names = list.files(dir_input)
### input diretory
dir_input = "2_chamaecrista/sequences_rogueless/"
file_names = list.files(dir_input)
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
## drop matK
file_names = file_names[file_names != "matK.fasta"]
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### all spp names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = sort(unique(all_names))
all_names
fasta_list
### including all spp in all loci
my_fasta_list = fasta_list
for(i in 1:length(fasta_list)){
one_locus = fasta_list[[i]]
n_patterns = length(one_locus[[1]])
for(name in all_names){
boll = name %in% names(one_locus)
if(boll == FALSE){
one_locus[[name]] = as.integer(rep(18, n_patterns))
}
}
my_fasta_list[[i]] = one_locus
}
### ordering
for(i in 1:length(my_fasta_list)){
my_fasta_list[[i]] = my_fasta_list[[i]][all_names]
}
### exporting sequences
dir_out = "3_final_sequences/cassieae_concatenation_matkless/"
for(i in 1:length(my_fasta_list)){
fasta_name = paste0(names(my_fasta_list)[i], ".fasta")
write.phyDat(x = my_fasta_list[[i]],
file = paste0(dir_out,fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
### file names
dir_input = "4_final_trees/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### file names
dir_input = "4_final_trees/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
### file names
dir_input = "4_ml_trees/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
tree_list
### select output dir
dir_out = "4_ml_trees/clean_trees/"
### remove node info
tree_list_rag = tree_list
for(i in 1:length(tree_list) ){ #
tree_name = paste0(names(tree_list)[i] , ".tree")
for(j in 1:length(tree_list[[i]])){
## force dichotomy
tree_list_rag[[i]][[j]] = multi2di(tree_list_rag[[i]][[j]])
## remove node info
tree_list_rag[[i]][[j]]$node.label = NULL
}
## export
write.tree(phy =  tree_list_rag[[i]],
file = paste0(dir_out,tree_name)
)
}
tree_list_rag
my_tree = tree_list$ml_iq_rooted.tree
my_tree$Nnode = NULL
my_tree
plot(my_tree)
plot(my_tree)
my_tree
my_tree = tree_list$ml_iq_rooted.tree
my_tree
tree_list$ml_iq_rooted.tree
plot(my_tree)
plot(my_tree, cex=0.5)
my_tree = tree_list$ml_iq_rooted.tree
my_tree$node.label = NULL
my_tree$edge.length
my_tree$edge.length = NULL
plot(my_tree, cex=0.5)
my_tree = multi2di(my_tree)
plot(my_tree, cex=0.5)
my_tree = tree_list$ml_iq_rooted.tree
my_tree$node.label = NULL
my_tree$edge.length = NULL
my_tree = multi2di(my_tree)
plot(my_tree, cex=0.5)
my_tree = tree_list$ml_iq_rooted.tree
my_tree$node.label = NULL
my_tree$edge.length = NULL
my_tree = multi2di(my_tree)
plot(my_tree, cex=0.5)
tree_name
dir_out
tree_name
write.tree(phy =  my_tree,
file = paste0(dir_out,tree_name)
)
### file names
dir_input = "1_initial_sequences/nery_aligments/"
file_names = list.files(dir_input)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
### file names
dir_input = "1_initial_sequences/nery_aligments/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
dir_out = "2_cassieae_nery/boots_trees/"
for(i in 1:length(fasta_list) ){
## tree name
tree_name = paste0(names(fasta_list)[i], ".tree")
## bootstrap MP trees
boots_mp_trees = bootstrap.phyDat(fasta_list[[i]],
FUN = function(x)NJ(dist.hamming(x)), # pratchet
bs = 100)
## export
write.tree(phy =  boots_mp_trees,
file = paste0(dir_out, tree_name)
)
## warn
print(paste0("MP trees done: ",tree_name))
}
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### file names
dir_input = "2_cassieae_nery/boots_trees_clean/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
### getting species per locus
all_names = c()
for(i in 1:length(tree_list)){
some_names = tree_list[[i]][[1]]$tip.label
all_names = c(all_names, some_names)
}
### into one dataframe
all_names = sort(unique(all_names))
all_names
