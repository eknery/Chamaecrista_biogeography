### get Chamaecrista with matK
names_loci %>%
filter( grepl("Senna_", species)) %>%
filter(ITS == TRUE, matK == TRUE , trnDT == TRUE, trnLF == TRUE) %>%
select(species) %>%
pull()
### get Chamaecrista with matK
names_loci %>%
filter( grepl("Senna_", species)) %>%
filter(ITS == TRUE, matK == TRUE ,  trnLF == TRUE) %>%
select(species) %>%
pull()
### get Chamaecrista with matK
names_loci %>%
filter( !grepl("C_", species)) %>%
filter((ETS == TRUE |ITS == TRUE) & matK == TRUE & (trnDTF == TRUE | trnLF == TRUE)) %>%
select(species) %>%
pull()
### get Chamaecrista with matK
names_loci %>%
filter( !grepl("C_", species)) %>%
filter((ETS == TRUE |ITS == TRUE) & matK == TRUE & (trnDT == TRUE | trnLF == TRUE)) %>%
select(species) %>%
pull()
### get Chamaecrista with matK
names_loci %>%
filter( !grepl("C_", species)) %>%
filter((ETS == TRUE |ITS == TRUE) & (matK == TRUE | trnDT == TRUE | trnLF == TRUE)) %>%
select(species) %>%
pull()
View(names_loci)
### get species with loci in nucleus and plastid
sampled_names = names_loci %>%
filter( !grepl("C_", species)) %>%
filter((ETS == TRUE |ITS == TRUE) & (matK == TRUE | trnDT == TRUE | trnLF == TRUE)) %>%
select(species) %>%
pull()
names_loci %>%
filter( grepl("C_", species)) %>%
select(species) %>%
pull()
### chamaecrista names
c_names = names_loci %>%
filter( grepl("C_", species)) %>%
select(species) %>%
pull()
### keep names
keep_names = (c_names, sampled_names)
### keep names
keep_names = c(c_names, sampled_names)
keep_names
### keeping only cassieae
my_fasta_list = fasta_list
for(i in 1:length(fasta_list)){
my_fasta_list[[i]] = fasta_list[[i]][names(fasta_list[[i]]) %in% keep_names]
names(fasta_list)[i] = names(fasta_list)[i]
}
View(my_fasta_list)
### exporting sequences from ingroup
dir_out = "2_chamaecrista/sequences_rogueless/"
for(i in 1:length(my_fasta_list)){
fasta_name = paste0(names(my_fasta_list)[i], ".fasta")
write.phyDat(x = my_fasta_list[[i]],
file = paste0(dir_out,fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_chamaecrista/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
dir_out = "3_final_sequences/chamaecrista_STARBEAST/"
for(i in 1:length(fasta_list) ){
locus_name = names(fasta_list)[i]
one_marker = fasta_list[[i]]
names(one_marker) = paste(names(fasta_list[[i]]), locus_name, sep="_")
fasta_name = paste0(names(fasta_list)[i], ".fasta")
write.phyDat(x = one_marker,
file = paste0(dir_out, fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_chamaecrista/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### all spp names
all_names = c()
for(i in 1:length(fasta_list)){
all_names = c(all_names, names(fasta_list[[i]]))
}
all_names = sort(unique(all_names))
### including all spp in all loci
my_fasta_list = fasta_list
for(i in 1:length(fasta_list)){
one_locus = fasta_list[[i]]
n_patterns = length(one_locus[[1]])
for(name in all_names){
boll = name %in% names(one_locus)
if(boll == FALSE){
one_locus[[name]] = as.integer(rep(18, n_patterns))
}
}
my_fasta_list[[i]] = one_locus
}
### ordering
for(i in 1:length(my_fasta_list)){
my_fasta_list[[i]] = my_fasta_list[[i]][all_names]
}
### exporting sequences
dir_out = "3_final_sequences/chamaecrista_concatenation/"
for(i in 1:length(my_fasta_list)){
fasta_name = paste0(names(my_fasta_list)[i], ".fasta")
write.phyDat(x = my_fasta_list[[i]],
file = paste0(dir_out,fasta_name),
format = "fasta",
colsep = "",
nbcol =100
)
}
View(my_fasta_list)
View(fasta_list)
View(my_fasta_list)
my_fasta_list[[i]]
my_fasta_list[[1]][[1]]
one_seq = c()
j = 1
one_seq = c()
for(i in length(my_fasta_list[[i]])){
one_seq = c(one_seq, my_fasta_list[[i]][[j]])
}
my_fasta_list[[i]][[j]]
my_fasta_list[[i]]
j = 1
one_seq = c()
for(i in 1:length(my_fasta_list[[i]]) ){
one_seq = c(one_seq, my_fasta_list[[i]][[j]])
}
one_seq = c()
for(i in 1:length(my_fasta_list) ){
one_seq = c(one_seq, my_fasta_list[[i]][[j]])
}
one_seq
fasta_list[[1]]
my_fasta_list[[1]]
n_spp = length(my_fasta_list[[1]])
conc_fasta = my_fasta_list[[1]]
n_spp = length(my_fasta_list[[1]])
conc_fasta = my_fasta_list[[1]]
for(j in 1:n_spp){
one_seq = c()
for(i in 1:length(my_fasta_list) ){
one_seq = c(one_seq, my_fasta_list[[i]][[j]])
}
conc_fasta[[j]] = one_seq
}
View(conc_fasta)
write.phyDat(x = conc_fasta,
file = paste0(dir_out,"super_matrix"),
format = "fasta",
colsep = "",
nbcol =100
)
paste0(dir_out,"super_matrix"
paste0(dir_out,"super_matrix")
paste0(dir_out,"super_matrix")
### concatenation
n_spp = length(my_fasta_list[[1]])
super_fasta = my_fasta_list[[1]]
for(j in 1:n_spp){
one_seq = c()
for(i in 1:length(my_fasta_list) ){
one_seq = c(one_seq, my_fasta_list[[i]][[j]])
}
super_fasta[[j]] = one_seq
}
write.phyDat(x = conc_fasta,
file = paste0(dir_out,"super_matrix.fasta"),
format = "fasta",
colsep = "",
nbcol =100
)
paste0(dir_out,fasta_name)
paste0(dir_out,"super_matrix.fasta")
write.phyDat(x = conc_fasta,
file = paste0(dir_out,"super_matrix.fasta"),
format = "fasta",
colsep = "",
nbcol =100
)
View(super_fasta)
super_fasta[[1]]
write.phyDat(x = super_fasta,
file = paste0(dir_out,"super_matrix.fasta"),
format = "fasta",
colsep = "",
nbcol =100
)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
write.phyDat(x = super_fasta,
file = paste0(dir_out,"super_matrix.fasta"),
format = "fasta",
colsep = "",
nbcol =100
)
my_fasta_list[[i]]
super_fasta[1
super_fasta[1]
super_fasta[1]
my_fasta_list[[1]]
super_fasta = my_fasta_list[[1]]
super_fasta[[j]]
super_fasta = my_fasta_list[[1]]
super_fasta
View(super_fasta)
### concatenation
n_spp = length(my_fasta_list[[1]])
super_fasta = my_fasta_list[[1]]
for(j in 1:n_spp){
one_seq = c()
for(i in 1:length(my_fasta_list) ){
one_seq = c(one_seq, my_fasta_list[[i]][[j]])
}
super_fasta[[j]] = one_seq
}
View(super_fasta)
super_fasta
super_fasta
read.phyDat(super_fasta,
format = "fasta",
type = "DNA"
)
## fit subsitution models
model_fit = modelTest(super_fasta, model = "all")
## pick the best model
best_model = model_fit[model_fit$AICc == min(model_fit$AICc),]
best_model
## parameter estimates from best model
best_fit = as.pml(best_model, best_model$Model)
best_fit
### optimize tree
ml_tree = pml_bb(x = best_fit,
rearrangements="NNI",
control = pml.control(trace = 0))
ml_tree
plot(ml_tree)
plot(ml_tree, cex=0.5)
## select output dir
dir_out = "2_chamaecrista/"
## export tree
write.tree(phy =  ml_tree$tree,
file = paste0(dir_out,"super_fasta",".tree")
)
dist.dna(super_fasta)
as.matrix(super_fasta)
if(!require("EnvNJ")) install.packages("EnvNJ"); library("EnvNJ")
### input diretory
dir_input = "3_final_sequences/chamaecrista_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
otus = names(fasta_list[[1]])
otus
fastaconc(otus = otus,
inputdir = dir_input,
out.file = dir_input)
otus
otus
fastaconc(otus = otus,
inputdir = dir_input,
out.file = "./concatenated_multispecies.fasta")
fastaconc(otus = otus,
inputdir = dir_input,
out.file = ".concatenated_multispecies.fasta")
fastaconc(otus = otus,
inputdir = dir_input,
out.file = "concatenated_multispecies.fasta")
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### file names
dir_input = "4_final_trees/"
file_names = list.files(dir_input)
### loading data
tree_list = list()
for(i in 1:length(file_names) ){
tree_name = file_names[i]
tree_list[[i]] = read.tree(file = paste0(dir_input, tree_name))
names(tree_list)[i] =  str_remove(string = tree_name,
pattern = ".tree")
}
tree_list
### input diretory
dir_input = "3_final_sequences/chamaecrista_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### input diretory
dir_input = "3_final_sequences/chamaecrista_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
common_names = names(fasta_list[[1]])
# pruning trees to sampled species
pruned_trees_list = tree_list
for (i in 1:length(tree_list) ){
pruned_trees = tree_list[[i]]
for(j in 1:length(tree_list[[i]]) ){
pruned_trees[[j]] = keep.tip(phy = tree_list[[i]][[j]],
tip = common_names)
}
pruned_trees_list[[i]] = pruned_trees
}
tree_list
### file names
dir_input = "4_final_trees/zuntinni"
tree = read.tree(file = paste0(dir_input, tree_name))
tree = read.tree(file =dir_input)
### file names
dir_input = "4_final_trees/zuntinni.tree"
tree = read.tree(file =dir_input)
pruned_tree = keep.tip(phy = tree,
tip = common_names)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "3_final_sequences/chamaecrista_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "4_final_trees/zuntinni.tree"
tree = read.tree(file =dir_input)
common_names = names(fasta_list[[1]])
pruned_tree = keep.tip(phy = tree,
tip = common_names)
pruned_tree
plot(pruned_tree)
plot(pruned_tree, cex = 0.5)
## export
write.tree(phy =  pruned_tree,
file = "4_final_trees/prunned_zuntinni.tree"
)
### remove labels
pruned_tree$node.label = NULL
pruned_tree
## export
write.tree(phy =  pruned_tree,
file = "4_final_trees/prunned_zuntinni.tree"
)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "3_final_sequences/cassieae_concatenation/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### file names
dir_input = "4_final_trees/zuntinni.tree"
tree = read.tree(file =dir_input)
### names to keep
common_names = names(fasta_list[[1]])
### prun tree
pruned_tree = keep.tip(phy = tree,
tip = common_names)
### remove labels
pruned_tree$node.label = NULL
## export
write.tree(phy =  pruned_tree,
file = "2_cassieae/prunned_zuntinni.tree"
)
### load libraries
if(!require("tidyverse")) install.packages("tidyverse"); library("tidyverse")
if(!require("ggplot2")) install.packages("ggplot2"); library("ggplot2")
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
### input diretory
dir_input = "2_cassieae/sequences_rogueless/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
### getting species per locus
all_names = c()
for(i in 1:length(fasta_list)){
some_names = names(fasta_list[[i]])
all_names = c(all_names, some_names)
}
### into one dataframe
all_names = unique(all_names)
### get names per locus
names_loci =  all_names
for(i in 1:length(fasta_list)){
boll_names = all_names %in% names(fasta_list[[i]])
names_loci = cbind(names_loci, boll_names)
}
colnames(names_loci) = c("species", names(fasta_list))
names_loci
### transform to tibble
names_loci = as_tibble(names_loci)
names_loci
names_loci %>%
filer(grepl("C_", species))
names_loci %>%
filter(grepl("C_", species))
names_loci %>%
filter(grepl("C_", species)) %>%
sort(species)
names_loci %>%
filter(grepl("C_", species)) %>%
arrange(species)
c_table = names_loci %>%
filter(grepl("C_", species)) %>%
arrange(species)
write.table(c_table, "c_table.csv", h= T, sep=",")
write.table(c_table, "c_table.csv", sep=",")
write.table(c_table, "c_table.csv", sep=",", row.names = F)
