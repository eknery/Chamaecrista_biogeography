# Set working directory containing your alignment files
alignment_dir <- "3_final_sequences"
setwd(alignment_dir)
# List of alignment files (assuming .fasta format, change if needed)
alignment_files <- list.files(pattern = "\\.fasta$")
# Prepare a results data frame
results <- data.frame(File = character(), BestModel = character(), stringsAsFactors = FALSE)
# Loop through each alignment file
for (file in alignment_files) {
cat("Processing:", file, "\n")
# Read the alignment
aln <- read.dna(file, format = "fasta")
# Create a distance-based starting tree
dm <- dist.dna(aln)
tree <- NJ(dm)
# Convert DNA alignment to phyDat object
phy <- phyDat(aln, type = "DNA")
# Fit different models using pml
fit <- pml(tree, phy)
# Test multiple models
models <- c("JC", "K80", "F81", "HKY", "SYM", "GTR")
best_model <- ""
best_aic <- Inf
for (model in models) {
cat("  Testing model:", model, "\n")
fit_tmp <- update(fit, k = 4, inv = 0.2)
fit_tmp <- optim.pml(fit_tmp, model = model, optGamma = TRUE, optInv = TRUE, control = pml.control(trace = 0))
aic <- AIC(fit_tmp)
if (aic < best_aic) {
best_aic <- aic
best_model <- model
}
}
# Save result
results <- rbind(results, data.frame(File = file, BestModel = best_model, stringsAsFactors = FALSE))
}
### load libraries
if(!require("phangorn")) install.packages("phangorn"); library("phangorn")
if(!require("ape")) install.packages("ape"); library("ape")
if(!require("seqinr")) install.packages("seqinr"); library("seqinr")
# Loop through each alignment file
for (file in alignment_files) {
cat("Processing:", file, "\n")
# Read the alignment
aln <- read.dna(file, format = "fasta")
# Create a distance-based starting tree
dm <- dist.dna(aln)
tree <- NJ(dm)
# Convert DNA alignment to phyDat object
phy <- phyDat(aln, type = "DNA")
# Fit different models using pml
fit <- pml(tree, phy)
# Test multiple models
models <- c("JC", "K80", "F81", "HKY", "SYM", "GTR")
best_model <- ""
best_aic <- Inf
for (model in models) {
cat("  Testing model:", model, "\n")
fit_tmp <- update(fit, k = 4, inv = 0.2)
fit_tmp <- optim.pml(fit_tmp, model = model, optGamma = TRUE, optInv = TRUE, control = pml.control(trace = 0))
aic <- AIC(fit_tmp)
if (aic < best_aic) {
best_aic <- aic
best_model <- model
}
}
# Save result
results <- rbind(results, data.frame(File = file, BestModel = best_model, stringsAsFactors = FALSE))
}
phy
alignment_files
file
# Read the alignment
aln <- read.dna(file, format = "fasta")
# Create a distance-based starting tree
dm <- dist.dna(aln)
tree <- NJ(dm)
# fit models
modelfits = modelTest(object = phy,
model = "all",
G = TRUE,
I = TRUE
# Save result
results <- rbind(results,
# Read the alignment
aln <- read.dna(file, format = "fasta")
# Convert DNA alignment to phyDat object
phy <- phyDat(aln, type = "DNA")
# fit models
modelfits = modelTest(
object = phy,
model = "all",
G = TRUE,
I = TRUE
)
# Set working directory containing your alignment files
alignment_dir <- "1_initial_sequences"
setwd(alignment_dir)
### input diretory
dir_input = "1_initial_sequences/"
file_names = list.files(dir_input)
### loading data
fasta_list = list()
for(i in 1:length(file_names) ){
fasta_list[[i]] = read.phyDat(paste0(dir_input, file_names[i]),
format = "fasta",
type = "DNA"
)
names(fasta_list)[i] = str_remove(string = file_names[i],
pattern = ".fasta")
}
getwd()
