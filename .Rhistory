#### Set up BAYAREALIKE model
## No subset sympatry
bay1$BioGeoBEARS_model_object@params_table["s","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["s","init"] = 0.0
bay1$BioGeoBEARS_model_object@params_table["s","est"] = 0.0
## No vicariance
bay1$BioGeoBEARS_model_object@params_table["v","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["v","init"] = 0.0
bay1$BioGeoBEARS_model_object@params_table["v","est"] = 0.0
## Adjust linkage between parameters
bay1$BioGeoBEARS_model_object@params_table["ysv","type"] = "1-j"
bay1$BioGeoBEARS_model_object@params_table["ys","type"] = "ysv*1/1"
bay1$BioGeoBEARS_model_object@params_table["y","type"] = "1-j"
## Only sympatric/range-copying (y) events allowed
bay1$BioGeoBEARS_model_object@params_table["mx01y","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["mx01y","init"] = 0.9999
bay1$BioGeoBEARS_model_object@params_table["mx01y","est"] = 0.9999
### input time strata and dispersal matrices
bay1$timesfn = timesfn
bay1$areas_allowed_fn = areas_allowed_fn
bay1$dispersal_multipliers_fn = dispersal_multipliers_fn
### loads the dispersal multiplier matrix
bay1 = readfiles_BioGeoBEARS_run(bay1)
### Divide the tree up by time periods
bay1 = section_the_tree(inputs=bay1,
make_master_table=TRUE,
plot_pieces=FALSE,
fossils_older_than=0.5,
cut_fossils=FALSE)
### Decribe stratified table:
bay1$master_table
div3$master_table
div2$master_table
### initialize DIVALIKE
bay1 = define_BioGeoBEARS_run()
### inputting tree
bay1$trfn = trfn
### location of the geography text file
bay1$geogfn = geogfn
### Input the maximum range size
bay1$max_range_size = max_range_size
### Min to treat tip as a direct ancestor (no speciation event)
bay1$min_branchlength = 0.001
### set to FALSE for e.g. DEC* model, DEC*+J, etc.
bay1$include_null_range = TRUE
#### Set up BAYAREALIKE model
## No subset sympatry
bay1$BioGeoBEARS_model_object@params_table["s","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["s","init"] = 0.0
bay1$BioGeoBEARS_model_object@params_table["s","est"] = 0.0
## No vicariance
bay1$BioGeoBEARS_model_object@params_table["v","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["v","init"] = 0.0
bay1$BioGeoBEARS_model_object@params_table["v","est"] = 0.0
## Adjust linkage between parameters
bay1$BioGeoBEARS_model_object@params_table["ysv","type"] = "1-j"
bay1$BioGeoBEARS_model_object@params_table["ys","type"] = "ysv*1/1"
bay1$BioGeoBEARS_model_object@params_table["y","type"] = "1-j"
## Only sympatric/range-copying (y) events allowed
bay1$BioGeoBEARS_model_object@params_table["mx01y","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["mx01y","init"] = 0.9999
bay1$BioGeoBEARS_model_object@params_table["mx01y","est"] = 0.9999
### input time strata and dispersal matrices
bay1$timesfn = timesfn
bay1$areas_allowed_fn = areas_allowed_fn
bay1$dispersal_multipliers_fn = dispersal_multipliers_fn
### loads the dispersal multiplier matrix
bay1 = readfiles_BioGeoBEARS_run(bay1)
### Divide the tree up by time periods
bay1 = section_the_tree(inputs=bay1,
make_master_table=TRUE,
plot_pieces=FALSE,
fossils_older_than=0.5,
cut_fossils=FALSE)
### Decribe stratified table:
bay1$master_table
### check
check_BioGeoBEARS_run(bay1)
### default settings to get ancestral states
bay1$return_condlikes_table = TRUE
bay1$calc_TTL_loglike_from_condlikes_table = TRUE
bay1$calc_ancprobs = TRUE    # get ancestral states from optim run
### computing options
bay1$num_cores_to_use = 5
### initialize DIVALIKE
bay1 = define_BioGeoBEARS_run()
### inputting tree
bay1$trfn = trfn
### location of the geography text file
bay1$geogfn = geogfn
### Input the maximum range size
bay1$max_range_size = max_range_size
### Min to treat tip as a direct ancestor (no speciation event)
bay1$min_branchlength = 0.001
### set to FALSE for e.g. DEC* model, DEC*+J, etc.
bay1$include_null_range = TRUE
#### Set up BAYAREALIKE model
## No subset sympatry
bay1$BioGeoBEARS_model_object@params_table["s","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["s","init"] = 0.0
bay1$BioGeoBEARS_model_object@params_table["s","est"] = 0.0
## No vicariance
bay1$BioGeoBEARS_model_object@params_table["v","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["v","init"] = 0.0
bay1$BioGeoBEARS_model_object@params_table["v","est"] = 0.0
## Adjust linkage between parameters
bay1$BioGeoBEARS_model_object@params_table["ysv","type"] = "1-j"
bay1$BioGeoBEARS_model_object@params_table["ys","type"] = "ysv*1/1"
bay1$BioGeoBEARS_model_object@params_table["y","type"] = "1-j"
## Only sympatric/range-copying (y) events allowed
bay1$BioGeoBEARS_model_object@params_table["mx01y","type"] = "fixed"
bay1$BioGeoBEARS_model_object@params_table["mx01y","init"] = 0.9999
bay1$BioGeoBEARS_model_object@params_table["mx01y","est"] = 0.9999
### check
check_BioGeoBEARS_run(bay1)
### default settings to get ancestral states
bay1$return_condlikes_table = TRUE
bay1$calc_TTL_loglike_from_condlikes_table = TRUE
bay1$calc_ancprobs = TRUE    # get ancestral states from optim run
### computing options
bay1$num_cores_to_use = 5
### fitting DIVA !
res_bay1 = bears_optim_run(bay1)
### plot
fast_plot(res = res_bay1)
### save fitted model
save(res_bay1, file="7_biogeo_results/BAYAREA_1.Rdata")
### time strata and dispersal matrices
timesfn = "6_biogeo_data/model_times.txt"
areas_allowed_fn = "6_biogeo_data/model3_areas_allowed.txt"
dispersal_multipliers_fn = "6_biogeo_data/model3_dispersal_multi.txt"
### initialize DIVALIKE
bay3 = define_BioGeoBEARS_run()
### inputting tree
bay3$trfn = trfn
### location of the geography text file
bay3$geogfn = geogfn
### Input the maximum range size
bay3$max_range_size = max_range_size
### Min to treat tip as a direct ancestor (no speciation event)
bay3$min_branchlength = 0.001
### set to FALSE for e.g. DEC* model, DEC*+J, etc.
bay3$include_null_range = TRUE
#### Set up BAYAREALIKE model
## No subset sympatry
bay3$BioGeoBEARS_model_object@params_table["s","type"] = "fixed"
bay3$BioGeoBEARS_model_object@params_table["s","init"] = 0.0
bay3$BioGeoBEARS_model_object@params_table["s","est"] = 0.0
## No vicariance
bay3$BioGeoBEARS_model_object@params_table["v","type"] = "fixed"
bay3$BioGeoBEARS_model_object@params_table["v","init"] = 0.0
bay3$BioGeoBEARS_model_object@params_table["v","est"] = 0.0
## Adjust linkage between parameters
bay3$BioGeoBEARS_model_object@params_table["ysv","type"] = "1-j"
bay3$BioGeoBEARS_model_object@params_table["ys","type"] = "ysv*1/1"
bay3$BioGeoBEARS_model_object@params_table["y","type"] = "1-j"
## Only sympatric/range-copying (y) events allowed
bay3$BioGeoBEARS_model_object@params_table["mx01y","type"] = "fixed"
bay3$BioGeoBEARS_model_object@params_table["mx01y","init"] = 0.9999
bay3$BioGeoBEARS_model_object@params_table["mx01y","est"] = 0.9999
### input time strata and dispersal matrices
bay3$timesfn = timesfn
bay3$areas_allowed_fn = areas_allowed_fn
bay3$dispersal_multipliers_fn = dispersal_multipliers_fn
### loads the dispersal multiplier matrix
bay3 = readfiles_BioGeoBEARS_run(bay3)
### Divide the tree up by time periods
bay3 = section_the_tree(inputs=bay3,
make_master_table=TRUE,
plot_pieces=FALSE,
fossils_older_than=0.5,
cut_fossils=FALSE)
### Decribe stratified table:
bay3$master_table
### check
check_BioGeoBEARS_run(bay3)
### default settings to get ancestral states
bay3$return_condlikes_table = TRUE
bay3$calc_TTL_loglike_from_condlikes_table = TRUE
bay3$calc_ancprobs = TRUE    # get ancestral states from optim run
### computing options
bay3$num_cores_to_use = 5
### fitting DIVA !
res_bay3 = bears_optim_run(bay3)
### plot
fast_plot(res = res_bay3)
### save fitted model
save(res_bay3, file="7_biogeo_results/BAYAREA_3.Rdata")
### libraries
library("rexpokit")
library("cladoRcpp")
library("BioGeoBEARS")
### get RData files with models
rdata_names = list.files(
path = paste0(getwd(),"/7_biogeo_results"),
pattern = ".Rdata"
)
### load all models
for(i in 1:length(rdata_names)){
load(paste0(getwd(),"/7_biogeo_results/", rdata_names[i]))
}
### objects with models
objs = objects(pattern = "res_")
### fit and estimates from models
model_vals = list()
for(i in 1:length(objs)){
model_vals[[i]] = extract_params_from_BioGeoBEARS_results_object(
results_object= eval(parse(text=objs[i])),
returnwhat= "table",
addl_params= c("j"),
paramsstr_digits= 4
)
}
### table with model info
model_table = setNames(
data.frame(
matrix(unlist(model_vals), nrow=length(model_vals), byrow=TRUE)
),
colnames(model_vals[[1]])
)
rownames(model_table) = objs
### AIC
model_table$aic = calc_AIC_vals(
LnL_vals = model_table$LnL,
nparam_vals = model_table$numparams
)
### AIC weights
AkaikeWeights_on_summary_table(model_table,
colname_to_use ="aic",
add_to_table = T)
model_table
model_table
### AIC weights
model_table = AkaikeWeights_on_summary_table(
model_table,
colname_to_use ="aic",
add_to_table = T
)
round(model_table$aic_wt)
round(model_table$aic_wt, 3)
### libraries
library("ape")
library("phytools")
library("rexpokit")
library("cladoRcpp")
library("BioGeoBEARS")
### load results
load("7_biogeo_results/DEC_3.Rdata")
### phylogenetic tree location
trfn = "5_posterior/mcc.tree"
tr = read.tree(file = trfn)
### number of extant and ancestral branches
n_tips = Ntip(tr)
n_anc = tr$Nnode
### reading range data
geogfn = "6_biogeo_data/micro_biogeo.data"
### reading range data
geogfn = "6_biogeo_data/biogeo.data"
moref(geogfn)
### converting phylip format to tipranges
tipranges = getranges_from_LagrangePHYLIP(lgdata_fn= geogfn)
### creating binary spp x areas
states_bin = tipranges@df
### creating numeric matrix from binaries
states_num = c()
for(i in 1:ncol(states_bin)){
one_col = as.numeric(states_bin[,i])
one_col[one_col == 1] = i
states_num = cbind(states_num, one_col)
}
### naming
row.names(states_num) = row.names(states_bin)
colnames(states_num) = colnames(states_bin)
### name of areas
areanames = names(tipranges@df)
### setting maximum number of areas occupied
max_range_size = max(rowSums(dfnums_to_numeric(tipranges@df)))
### accept null range?
include_null_range = F
### list of codes for each node
states_list_0based_index = rcpp_areas_list_to_states_list(
areas= areanames,
maxareas= max_range_size,
include_null_range= include_null_range
)
### states for each node
statenames = areas_list_to_states_list_new(
areas= areanames,
maxareas= max_range_size, include_null_range= include_null_range,
split_ABC=FALSE
)
### relative probability of each states for each node
relprobs_matrix = res_dec2$ML_marginal_prob_each_state_at_branch_top_AT_node
### relative probability of each states for each node
relprobs_matrix = res_dec3$ML_marginal_prob_each_state_at_branch_top_AT_node
### get maximum probibility values
ml_probs = get_ML_probs(relprobs_matrix)
### get states with maximum probability values
ml_states = get_ML_states_from_relprobs(
relprobs_matrix,
statenames,
returnwhat="states",
if_ties="takefirst"
)
### only ancestral states
anc_states = ml_states[(n_tips+1):(n_tips+n_anc)]
source("scripts/function_mix_color.R")
### colors for each area
area_col = c(
"A" = "forestgreen",
"B" = "pink",
"C" = "lightgoldenrod",
"D" = "darkred",
"E" = "lightgreen",
"F" = "lightblue",
"G" = "darkblue",
"H" = "mediumpurple",
"I" = "gray20"
)
### color list
col_list = list()
for(i in 1:length(area_col) ){
col_vec = c("white",area_col[i])
names(col_vec) = c("0", "1")
col_list[[i]] = col_vec
}
names(col_list) = names(area_col)
### create colors for reconstructed ancestral states
uni_states = sort(unique(anc_states) )
state_col = c()
for(one_state in uni_states){
# break code
string= unlist(strsplit(one_state, split = ""))
# get first color
one_col = area_col[[string[1]]]
if(length(string) > 1 ){
for(i in 2:length(string)){
# get next color
next_col = area_col[[string[i]]]
# mix colors
one_col = mix_color(col1 = one_col,
col2 = next_col)
}
}
# add new color
state_col = c(state_col, one_col)
}
names(state_col) = uni_states
### organize into vector
anc_state_col = c()
for(anc in anc_states){
anc_state_col = c(anc_state_col, state_col[anc])
}
### colors for non-reconstructed states
all_states = unlist(statenames)
non_states = all_states[!all_states %in% names(state_col)]
non_col = rep("black", length(non_states))
names(non_col) = non_states
full_col = c(state_col, non_col)
full_col = full_col[all_states]
### inner node probabilities
inner_node_probs = as.data.frame(relprobs_matrix[(1+n_tips):(n_tips+n_anc),])
colnames(inner_node_probs) = all_states
### legend vectors
comb_area_col = state_col[!names(state_col)%in%names(area_col)]
leg_1 = area_col
leg_2 = comb_area_col[sort(names(comb_area_col))[1:9] ]
leg_3 = comb_area_col[sort(names(comb_area_col))[10:17] ]
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
nodelabels(
node= (1+n_tips):(n_tips+n_anc),
pie = inner_node_probs,
piecol = full_col,
cex= 0.5
)
add.simmap.legend(
colors= leg_1,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=0,
y=100
)
add.simmap.legend(
colors= leg_2,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=10,
y=100
)
add.simmap.legend(
colors= leg_3,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=30,
y=100
)
### export pie chart
tiff("figures/biogeo_plot_pie.tiff",
units="cm",
width= 9,
height= 18,
res=900)
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
nodelabels(
node= (1+n_tips):(n_tips+n_anc),
pie = inner_node_probs,
piecol = full_col,
cex= 0.5
)
add.simmap.legend(
colors= leg_1,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=0,
y=100
)
add.simmap.legend(
colors= leg_2,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=10,
y=100
)
add.simmap.legend(
colors= leg_3,
fsize= 0.8,
shape="square",
prompt=FALSE,
x=30,
y=100
)
dev.off()
### export square
tiff("figures/biogeo_plot_square.tiff",
units="cm",
width= 9,
height= 18,
res=900)
x = plot(tr)
x
lines(
x=c(0.0000, 859.5811),
y=c(0, 283),
lwd=2
)
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
lines(
x=c(0.0000, 859.5811),
y=c(0, 283),
lwd=2
)
### export pie chart
tiff("figures/biogeo_plot_pie.tiff",
units="cm",
width= 9,
height= 16,
res=900)
plotTree.datamatrix(
tree = tr,
X= states_bin,
fsize= 0.15,
header = F,
colors = col_list,
space = 0,
xexp = 1.12,
yexp = 0.98
)
nodelabels(
node= (1+n_tips):(n_tips+n_anc),
pie = inner_node_probs,
piecol = full_col,
cex= 0.5
)
plot(tr)
plot(tr)
lines(
x=c(0.0000, 859.5811),
y=c(0, 283),
lwd=2
)
